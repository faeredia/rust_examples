extern crate time;
extern crate rusqlite;

use time::{Timespec, Tm};
use rusqlite::Connection;
use std::io::{self, BufRead, stdout, Write};
use std::error::Error;
use std::vec::Vec;
use std::process::exit;

#[derive(Debug)]
pub struct Todo {
    id: i64,
    pub title: String,
    pub description: String,
    created_at: Timespec,
    completed_at_s: Option<Timespec>,
}


trait PrettyTime {
    fn pretty_time(&self) -> String;
}
impl PrettyTime for Tm {
    fn pretty_time(&self) -> String {
        self.rfc822().to_string()
    }
}
impl PrettyTime for Option<Tm> {
    fn pretty_time(&self) -> String {
        match self {
            Some(t) => t.pretty_time(),
            None => "Null".to_string(),
        }
    }
}

impl Todo{
    pub fn new(title: String, description: String) -> Todo {
        Todo {  
                id: 0,
                title: title,
                description: description,
                created_at: time::now_utc().to_timespec(),
                completed_at_s: None
        }
    }

    pub fn pretty_time(t: time::Tm) -> String {
        t.rfc822().to_string()
    }
    
    pub fn created_at(&self) -> Tm {
        time::at(self.created_at)
    }

    pub fn completed_at(&self) -> Option<Tm> {
        match self.completed_at_s {
            None => None,
            Some(t) => Some(time::at(t)),
        }
    }

    pub fn set_complete(&mut self) {
        if !self.is_done() {
            self.completed_at_s = Some(time::now_utc().to_timespec());
        }
    }

    pub fn is_done(&self) -> bool {
        self.completed_at_s.is_some()
    }

    pub fn print(&self) {
        println!("ID:\t\t{}", self.id);
        println!("Date Created:\t{}", self.created_at().pretty_time());
        println!("Date completed:\t{}", match self.completed_at() {
            Some(t) => t.pretty_time(),
            None => "".to_string(),
        });
        println!("Title:\t\t{}", self.title.trim_right());
        println!("Description:\t{}", self.description.trim_right());
        
    }
//pub fn to_sql_tuple(&self) -> [ String; 4 ] {
//        let arr: [String; 4] = [
//            self.title.clone(),
//            self.description.clone(),
//            self.created_at().rfc822().to_string().clone(),
//            match self.completed_at() {
//                Some(a) => a.rfc822().to_string().clone(),
//                None => "NULL".to_string().clone(),
//            }
//        ];
//        arr
//    }
}

fn make_db() {
    let conn = Connection::open("mydb.sqlite").unwrap();
    conn.execute("DROP TABLE IF EXISTS todo", &[]).unwrap(); 
    conn.execute("CREATE TABLE IF NOT EXISTS todo (
                    id INTEGER PRIMARY KEY,
                    title TEXT NOT NULL,
                    description TEXT NOT NULL,
                    time_created    TEXT NOT NULL,
                    time_completed  TEXT DEFAULT NULL
                    )", &[]).unwrap();
}

fn add_new() -> Result<(), Box<Error>> {
    println!("Creating new TODO record.\nFollow the prompts:");
    let stdin = io::stdin();
    let mut title = String::new();
    let mut description = String::new();

    print!("Title: ");
    stdout().flush()?;
    stdin.lock().read_line(&mut title)?;
    print!("Description: ");
    stdout().flush()?;
    stdin.lock().read_line(&mut description)?;

    //let t = Todo::new(title, description);
    //println!("{:?}", t);

    let conn = Connection::open("mydb.sqlite").expect("failed to open db");
    conn.execute(
        "INSERT INTO todo (title, description, time_created) 
        VALUES (?1, ?2, ?3)",
        &[  &title, 
            &description, 
            &time::get_time(),
            //&t.created_at().rfc822().to_string(),
            //&t.created_at().pretty_time(),
                        //&match t.completed_at() {
            //    Some(a) => a.rfc822().to_string(),
            //    None => "NULL".to_string(),
            //}
            //&t.completed_at().pretty_time()
        ]
        //&t.to_sql_tuple();
    )?;

    Ok(())
}

fn user_input(prompt_text: &str) -> Result<String, Box<Error>> {
    print!("{}", prompt_text);
    io::stdout().flush().expect("Error flushing stdout. this shouldnt happen");
    //let mut res = Result::new();
    let mut line = String::new();
    //io::stdin().lock().read_line(&mut line);
    //io::stdin().read_line(&mut line);
    
    io::stdin().read_line(&mut line)?;
    Ok(line.trim_right().to_string().to_lowercase())
    //{
    //    Ok(_) => {
    //        Ok(line.trim_right().to_string().to_lowercase())
    //        //println!("You wrote: {}", line);
    //    },
    //    Err(error) => Err(error) 
    //}
}

fn db_delete(id: i64){
    let conn = Connection::open("mydb.sqlite").expect("failed to open db");
    match conn.execute("
            DELETE FROM todo WHERE id == ?1
        ", &[ &id ]){
        Err(e) => println!("{}", e),
        Ok(_) => ()
    };
}

//returns an iterator i guess...
fn db_fetch() -> Vec<Result<Todo, rusqlite::Error>> {
    let conn = Connection::open("mydb.sqlite").expect("failed to open db");
    let mut stmt = conn.prepare("
        SELECT 
            id,
            title, 
            description, 
            time_created, 
            time_completed
        FROM 
            todo
    ").unwrap();
    let itr = stmt.query_map(&[], |row| {
        Todo {
            id: row.get(0),
            title: row.get(1),
            description: row.get(2),
            created_at: row.get(3),
            completed_at_s: row.get(4)
        }
    }).unwrap();
    let mut lst = Vec::new();
    for thing in itr {
        lst.push(thing);
    }
    lst
}

fn prompt_open() {
    //let mut stck = Vec::new();

    let conn = Connection::open("mydb.sqlite").expect("failed to open db");
    let mut stmt = conn.prepare("
        SELECT 
            id,
            title, 
            description, 
            time_created, 
            time_completed
        FROM 
            todo
    ").unwrap();
    let itr = stmt.query_map(&[], |row| {
        Todo {
            id: row.get(0),
            title: row.get(1),
            description: row.get(2),
            created_at: row.get(3),
            completed_at_s: row.get(4)
        }
    }).unwrap();
    let mut lst = Vec::new();
    for thing in itr {
        lst.push(thing);
    }
    //println!("{}", lst.len());
    let mut i: usize= 0;
    loop {
        println!("");
        let id = { 
            let row = lst.get(i);
            let rec: &Todo;
            match row {
                Some(Ok(r)) => rec = r,
                Some(Err(e)) => { println!("Error: {}",e); break;},
                None => break,
            }
            rec.print();
            rec.id
        }
        //println!("{:?}", lst.get(i));
        println!();
        println!("Type a command:\t(n)ext\t(m)enu\t(q)uit\t(d)iscard\t(e)dit");
        //let mut line = String::new();
        let text = format!("(todo->open[{} of {}]) : ", i+1, lst.len());
        let line = user_input(&text).unwrap();
        //match io::stdin().read_line(&mut line) {
        //match user_input() {
        //    Ok(_) => line = line.trim_right().to_string().to_lowercase(),
        //    Err(error) => println!("Error reading stdin: {}", error)
        //}
        match line.as_ref() {
            "m" | "menu"    => break,
            "q" | "quit"    => exit(-1), //this is potentially dangerous?
            "n" | "next"    => 
                if i == lst.len() - 1 {
                    println!("On last item");
                } else {
                    i = i + 1;
                },
            "b" | "back"    => 
                if i == 0 {
                    println!("On first item");
                } else {
                    i = i -1
                },
            "e" | "edit"    => (),
            "d" | "discard" => {
                db_delete(id);
                lst = db_fetch();  
            },
            _ => println!("Invalid command")
        }
    }
    //println!("{:?}", lst[0]);
    //for rec in itr: {
    //    vec.push(&rec);
    //    println!("Opened record {}:", record_id); 
    //    println!("Title: {}", title);
    //    println!("Description: {}", description);
    //    println!("Created at: {}", created_at);

    //    println!("Type a command:\t(n)next\t(c)omplete\t(b)ack\t(q)uit");
    //    
    //}
}

fn repl() {
    loop {
        println!("Type a command:\t(q)uit\t(n)ew\t(o)pen\t(d)atabase");
        //print!("(todo) : ");
        io::stdout().flush().expect("Error flushing stdout. this shouldnt happen");
        let mut line = String::new();
        //io::stdin().lock().read_line(&mut line);
        //match io::stdin().read_line(&mut line) {
        //    Ok(_) => {
        //        line = line.trim_right().to_string().to_lowercase();
        //        //println!("You wrote: {}", line);
        //    },
        //    Err(error) => println!("Error reading stdin: {}", error)
        //}
        match user_input("(todo): "){
            Ok(t) => line = t,
            Err(e) => println!("Error reading stdin: {}", e),            
        }; 
        match line.as_ref() {
            "quit" | "q" => {
                println!("Quitting gracefully");
                return;
            },
            "new" | "n" => {
                //println!("Adding a new todo");
                match add_new() {
                    Err(e) => println!("{:?}", e),
                    _ => (),
                };
            },
            "open" | "o" => {
                println!("opening the last todo");
                prompt_open();
            },
            "database" | "d" => {
                println!("Remaking the databse");
                make_db();
            },
            _ => println!("Invalid input"), 
        }
    }
}

fn main() {
    println!("todo tracker");
    
    //let mut t = Todo::new("hooray".to_string(), "do stuff".to_string());
    //println!("Title: {}", t.title);
    //println!("Description: {}", t.description);
    //println!("Created at: {}", t.created_at);
    //println!("Created at (pretty): {}", t.created_at().rfc822());

    //if t.is_done() {
    //    println!("we dont get here");
    //}

    //t.set_complete();

    //match t.completed_at() {
    //    None => println!("Not completed"),
    //    Some(a) => println!("Completed at (pretty): {}", a.rfc822()),
    //}

    //if t.is_done() {
    //    println!("{}", t.completed_at().expect("danger danger").rfc822());
    //}
    repl();
}
